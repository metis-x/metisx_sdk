#pragma once

#include <stdint.h>

#ifdef __cplusplus
#define MEM_RANGE(name, start, end) \
    static const uint64_t MEM_START_##name = start; \
    static const uint64_t MEM_END_##name = end; \
    static const uint64_t MEM_SIZE_##name = end - start + 1ull; \
    inline bool is_##name##_range(uint64_t addr) {return (MEM_START_##name <= addr) && (addr <= MEM_END_##name ); }
#else
#define MEM_RANGE(name, start, end) \
    static const uint64_t MEM_START_##name = start; \
    static const uint64_t MEM_END_##name = end; \
    static const uint64_t MEM_SIZE_##name = end - start + 1ull; \
    inline uint64_t is_##name##_range(uint64_t addr) {return (MEM_START_##name <= addr) && (addr <= MEM_END_##name ); }
#endif
#define MEM_START(name) MEM_START_##name
#define MEM_SIZE(name) MEM_SIZE_##name
#define MEM_END(name) MEM_END_##name
#define IS_MEM_RANGE(name, addr) is_##name##_range(addr)

static constexpr uint64_t MAX_AXI_ADDR_SIZE = 39;

MEM_RANGE( CTR_SUB0 , 0x0000000000 , 0x001FFFFFFF );
    MEM_RANGE( CPU_CTRL , 0x0000000000 , 0x000FFFFFFF );
        MEM_RANGE( CPU_MEM , 0x0000000000 , 0x0003FFFFFF );
        //MEM_RANGE( RSVD , 0x0004000000 , 0x0007FFFFFF );
        MEM_RANGE( MDM , 0x0008000000 , 0x000800FFFF );
        MEM_RANGE( MB_INTR_CTRL , 0x0008010000 , 0x000801FFFF );
        MEM_RANGE( HDMA_CTRL , 0x0008020000 , 0x000802FFFF );
        MEM_RANGE( UART , 0x0008030000 , 0x000803FFFF );
        //MEM_RANGE( RSVD , 0x0008040000 , 0x000804FFFF );
        //MEM_RANGE( RSVD , 0x0008050000 , 0x001FFFFFFF );

MEM_RANGE( MTS_CORE0_DMON , 0x0020000000 , 0x0023FFFFFF );
MEM_RANGE( MTS_CORE1_DMON , 0x0024000000 , 0x0027FFFFFF );
//MEM_RANGE( RSVD , 0x0028000000 , 0x003FFFFFFF );

MEM_RANGE( MTS_CORE0_DDR_CTRL , 0x0040000000 , 0x004FFFFFFF );
    MEM_RANGE( DDR0_CTRL , 0x0040000000 , 0x004000FFFF );
    MEM_RANGE( DDR1_CTRL , 0x0040010000 , 0x004001FFFF );
    //MEM_RANGE( RSVD , 0x0040040000 , 0x004FFFFFFF );

MEM_RANGE( MTS_CORE1_DDR_CTRL , 0x0050000000 , 0x007FFFFFFF );
    MEM_RANGE( DDR2_CTRL , 0x0050000000 , 0x005000FFFF );
    MEM_RANGE( DDR3_CTRL , 0x0050010000 , 0x005001FFFF );
    //MEM_RANGE( RSVD , 0x0050020000 , 0x007FFFFFFF );

MEM_RANGE( MTS_CORE0 , 0x0080000000 , 0x017FFFFFFF );
    MEM_RANGE( MTS_SUB0 , 0x0080000000 , 0x008FFFFFFF );
        MEM_RANGE( CLST0 , 0x0080000000 , 0x0081FFFFFF );
            MEM_RANGE( MU_CTRL , 0x0080000000 , 0x00802FFFFF );
                MEM_RANGE( MU_S0_CTRL , 0x0080000000 , 0x008003FFFF );
                MEM_RANGE( MU_S1_CTRL , 0x0080040000 , 0x008007FFFF );
                MEM_RANGE( MU_S2_CTRL , 0x0080080000 , 0x00800BFFFF );
                MEM_RANGE( MU_S3_CTRL , 0x00800C0000 , 0x00800FFFFF );
                MEM_RANGE( MU_S4_CTRL , 0x0080100000 , 0x008013FFFF );
                MEM_RANGE( MU_S5_CTRL , 0x0080140000 , 0x008017FFFF );
                MEM_RANGE( MU_S6_CTRL , 0x0080180000 , 0x00801BFFFF );
                MEM_RANGE( MU_S7_CTRL , 0x00801C0000 , 0x00801FFFFF );
                MEM_RANGE( MU_S8_CTRL , 0x0080200000 , 0x008023FFFF );
                MEM_RANGE( MU_S9_CTRL , 0x0080240000 , 0x008027FFFF );
                MEM_RANGE( MU_S10_CTRL , 0x0080280000 , 0x00802BFFFF );
                MEM_RANGE( MU_S11_CTRL , 0x00802C0000 , 0x00802FFFFF );
            //MEM_RANGE( RSVD , 0x0080300000 , 0x0080FFFFFF );
            MEM_RANGE( MBX_CTRL , 0x0081000000 , 0x008107FFFF );
            MEM_RANGE( MU_IS0 , 0x0081080000 , 0x00810FFFFF );
            MEM_RANGE( MU_IS1 , 0x0081100000 , 0x008117FFFF );
            MEM_RANGE( MU_IS2 , 0x0081180000 , 0x00811FFFFF );
            MEM_RANGE( MDMA , 0x0081200000 , 0x008127FFFF );
            MEM_RANGE( L1C , 0x0081280000 , 0x00812FFFFF );
            //MEM_RANGE( RSVD , 0x0081300000 , 0x0081FFFFFF );
        MEM_RANGE( CLST1 , 0x0082000000 , 0x0083FFFFFF );
        MEM_RANGE( CLST2 , 0x0084000000 , 0x0085FFFFFF );
        MEM_RANGE( CLST3 , 0x0086000000 , 0x0087FFFFFF );
        //MEM_RANGE( RSVD , 0x0088000000 , 0x008FFFFFFF );
    MEM_RANGE( MTS_SUB1 , 0x0090000000 , 0x0091FFFFFF );
    MEM_RANGE( MTS_SUB2 , 0x00A0000000 , 0x00A1FFFFFF );
    MEM_RANGE( MTS_SUB3 , 0x00B0000000 , 0x00B1FFFFFF );

    MEM_RANGE( CTR_SUB1 , 0x00C0000000 , 0x00C1FFFFFF );
        MEM_RANGE( HOST_CTRL , 0x00C0000000 , 0x00C1FFFFFF );
            MEM_RANGE( GMON , 0x00C0000000 , 0x00C07FFFFF );
            //MEM_RANGE( RSVD , 0x00C0800000 , 0x00C0FFFFFF );
            MEM_RANGE( HMBX , 0x00C1000000 , 0x00C107FFFF );
            MEM_RANGE( CTR_CTRL , 0x00C1080000 , 0x00C10FFFFF );
            //MEM_RANGE( RSVD , 0x00C1400000 , 0x00C1FFFFFF );

    MEM_RANGE( ADM_SUB , 0x00C2000000 , 0x00C3FFFFFF );
        MEM_RANGE( ADM_CLST1 , 0x00C2000000 , 0x00C3FFFFFF );
            MEM_RANGE( MST_MS_CTRL , 0x00C2000000 , 0x00C27FFFFF );
                MEM_RANGE( MST_MS0_CTRL , 0x00C2000000 , 0x00C203FFFF );
                MEM_RANGE( MST_MS1_CTRL , 0x00C2040000 , 0x00C207FFFF );
                MEM_RANGE( MST_MS2_CTRL , 0x00C2080000 , 0x00C20BFFFF );
                MEM_RANGE( MST_MS3_CTRL , 0x00C20C0000 , 0x00C20FFFFF );
                MEM_RANGE( MST_MS4_CTRL , 0x00C2100000 , 0x00C213FFFF );
                MEM_RANGE( MST_MS5_CTRL , 0x00C2140000 , 0x00C217FFFF );
                MEM_RANGE( MST_MS6_CTRL , 0x00C2180000 , 0x00C21BFFFF );
                MEM_RANGE( MST_MS7_CTRL , 0x00C21C0000 , 0x00C21FFFFF );
                MEM_RANGE( MST_MS8_CTRL , 0x00C2200000 , 0x00C223FFFF );
                MEM_RANGE( MST_MS9_CTRL , 0x00C2240000 , 0x00C227FFFF );
                MEM_RANGE( MST_MS10_CTRL , 0x00C2280000 , 0x00C22BFFFF );
                MEM_RANGE( MST_MS11_CTRL , 0x00C22C0000 , 0x00C22FFFFF );
                MEM_RANGE( MST_MS12_CTRL , 0x00C2300000 , 0x00C233FFFF );
                MEM_RANGE( MST_MS13_CTRL , 0x00C2340000 , 0x00C237FFFF );
                MEM_RANGE( MST_MS14_CTRL , 0x00C2380000 , 0x00C23BFFFF );
                MEM_RANGE( MST_MS15_CTRL , 0x00C23C0000 , 0x00C23FFFFF );
                MEM_RANGE( MST_MS16_CTRL , 0x00C2400000 , 0x00C243FFFF );
                MEM_RANGE( MST_MS17_CTRL , 0x00C2440000 , 0x00C247FFFF );
                MEM_RANGE( MST_MS18_CTRL , 0x00C2480000 , 0x00C24BFFFF );
                MEM_RANGE( MST_MS19_CTRL , 0x00C24C0000 , 0x00C24FFFFF );
                MEM_RANGE( MST_MS20_CTRL , 0x00C2500000 , 0x00C253FFFF );
                MEM_RANGE( MST_MS21_CTRL , 0x00C2540000 , 0x00C257FFFF );
                MEM_RANGE( MST_MS22_CTRL , 0x00C2580000 , 0x00C25BFFFF );
                MEM_RANGE( MST_MS23_CTRL , 0x00C25C0000 , 0x00C25FFFFF );
                MEM_RANGE( MST_MS24_CTRL , 0x00C2600000 , 0x00C263FFFF );
                MEM_RANGE( MST_MS25_CTRL , 0x00C2640000 , 0x00C267FFFF );
                MEM_RANGE( MST_MS26_CTRL , 0x00C2680000 , 0x00C26BFFFF );
                MEM_RANGE( MST_MS27_CTRL , 0x00C26C0000 , 0x00C26FFFFF );
                MEM_RANGE( MST_MS28_CTRL , 0x00C2700000 , 0x00C273FFFF );
                MEM_RANGE( MST_MS29_CTRL , 0x00C2740000 , 0x00C277FFFF );
                MEM_RANGE( MST_MS30_CTRL , 0x00C2780000 , 0x00C27BFFFF );
                MEM_RANGE( MST_MS31_CTRL , 0x00C27C0000 , 0x00C27FFFFF );
            MEM_RANGE( ADM_MS_CTRL , 0x00C2800000 , 0x00C2FFFFFF );
                MEM_RANGE( ADM_MS0_CTRL , 0x00C2800000 , 0x00C283FFFF );
                MEM_RANGE( ADM_MS1_CTRL , 0x00C2840000 , 0x00C287FFFF );
                MEM_RANGE( ADM_MS2_CTRL , 0x00C2880000 , 0x00C28BFFFF );
                MEM_RANGE( ADM_MS3_CTRL , 0x00C28C0000 , 0x00C28FFFFF );
                MEM_RANGE( ADM_MS4_CTRL , 0x00C2900000 , 0x00C293FFFF );
                MEM_RANGE( ADM_MS5_CTRL , 0x00C2940000 , 0x00C297FFFF );
                MEM_RANGE( ADM_MS6_CTRL , 0x00C2980000 , 0x00C29BFFFF );
                MEM_RANGE( ADM_MS7_CTRL , 0x00C29C0000 , 0x00C29FFFFF );
                MEM_RANGE( ADM_MS8_CTRL , 0x00C2A00000 , 0x00C2A3FFFF );
                MEM_RANGE( ADM_MS9_CTRL , 0x00C2A40000 , 0x00C2A7FFFF );
                MEM_RANGE( ADM_MS10_CTRL , 0x00C2A80000 , 0x00C2ABFFFF );
                MEM_RANGE( ADM_MS11_CTRL , 0x00C2AC0000 , 0x00C2AFFFFF );
                MEM_RANGE( ADM_MS12_CTRL , 0x00C2B00000 , 0x00C2B3FFFF );
                MEM_RANGE( ADM_MS13_CTRL , 0x00C2B40000 , 0x00C2B7FFFF );
                MEM_RANGE( ADM_MS14_CTRL , 0x00C2B80000 , 0x00C2BBFFFF );
                MEM_RANGE( ADM_MS15_CTRL , 0x00C2BC0000 , 0x00C2BFFFFF );
                MEM_RANGE( ADM_MS16_CTRL , 0x00C2C00000 , 0x00C2C3FFFF );
                MEM_RANGE( ADM_MS17_CTRL , 0x00C2C40000 , 0x00C2C7FFFF );
                MEM_RANGE( ADM_MS18_CTRL , 0x00C2C80000 , 0x00C2CBFFFF );
                MEM_RANGE( ADM_MS19_CTRL , 0x00C2CC0000 , 0x00C2CFFFFF );
                MEM_RANGE( ADM_MS20_CTRL , 0x00C2D00000 , 0x00C2D3FFFF );
                MEM_RANGE( ADM_MS21_CTRL , 0x00C2D40000 , 0x00C2D7FFFF );
                MEM_RANGE( ADM_MS22_CTRL , 0x00C2D80000 , 0x00C2DBFFFF );
                MEM_RANGE( ADM_MS23_CTRL , 0x00C2DC0000 , 0x00C2DFFFFF );
                MEM_RANGE( ADM_MS24_CTRL , 0x00C2E00000 , 0x00C2E3FFFF );
                MEM_RANGE( ADM_MS25_CTRL , 0x00C2E40000 , 0x00C2E7FFFF );
                MEM_RANGE( ADM_MS26_CTRL , 0x00C2E80000 , 0x00C2EBFFFF );
                MEM_RANGE( ADM_MS27_CTRL , 0x00C2EC0000 , 0x00C2EFFFFF );
                MEM_RANGE( ADM_MS28_CTRL , 0x00C2F00000 , 0x00C2F3FFFF );
                MEM_RANGE( ADM_MS29_CTRL , 0x00C2F40000 , 0x00C2F7FFFF );
                MEM_RANGE( ADM_MS30_CTRL , 0x00C2F80000 , 0x00C2FBFFFF );
                MEM_RANGE( ADM_MS31_CTRL , 0x00C2FC0000 , 0x00C2FFFFFF );
            MEM_RANGE( MBX_ADM_CTRL , 0x00C3000000 , 0x00C307FFFF );
            //MEM_RANGE( RSVD , 0x00C3080000 , 0x00C3FFFFFF );
    //MEM_RANGE( RSVD , 0x00C4000000 , 0x00CFFFFFFF );

    MEM_RANGE( L2C_CTRL , 0x00D0000000 , 0x00D3FFFFFF );
        MEM_RANGE( L2C0 , 0x00D0000000 , 0x00D1FFFFFF );
        MEM_RANGE( L2C1 , 0x00D2000000 , 0x00D3FFFFFF );

    //MEM_RANGE( RSVD , 0x00D4000000 , 0x017FFFFFFF );
MEM_RANGE( MTS_CORE1 , 0x0180000000 , 0x01FFFFFFFF );
//MEM_RANGE( RSVD , 0x0200000000 , 0x07FFFFFFFF );

MEM_RANGE( MTS_CORE0_DDR , 0x0800000000 , 0x0FFFFFFFFF );
    MEM_RANGE( DDR , 0x0800000000 , 0x0FFFFFFFFF );
//MEM_RANGE( RSVD , 0x100000_0000 , 0x17FFFFFFFF );
MEM_RANGE( MTS_CORE1_DDR , 0x1800000000 , 0x1FFFFFFFFF );

/////////////////////////////////
// DRAM Detail
/////////////////////////////////
MEM_RANGE( DDR_DEVICE , (MEM_START(DDR) + 0x0000000000) , (MEM_START(DDR) + 0x017FFFFFFF) )
    MEM_RANGE( DDR_SYSTEM , (MEM_START(DDR) + 0x0000000000) , (MEM_START(DDR) + 0x000FFFFFFF)  )
        //MEM_RANGE( DDR_SYSTEM_Unavailable (at least 1MB)_ , (MEM_START(DDR) + 0x0000000000) , (MEM_START(DDR) + 0x0001FFFFFF)  )
        MEM_RANGE( DDR_CTRL_INFO , (MEM_START(DDR) + 0x0002000000) , (MEM_START(DDR) + 0x0003FFFFFF)  )
        MEM_RANGE( DDR_MBOX_RTL_SIM , (MEM_START(DDR) + 0x0004000000) , (MEM_START(DDR) + 0x0007FFFFFF)  )
        MEM_RANGE( DDR_DUMMY_MEMORY_FOR_TEST , (MEM_START(DDR) + 0x0008000000) , (MEM_START(DDR) + 0x0008FFFFFF)  )
        //MEM_RANGE( DDR_(256MB)_RSVD_ , (MEM_START(DDR) + 0x0008000000) , (MEM_START(DDR) + 0x000FFFFFFF)  )
    MEM_RANGE( DDR_MASTER_MEM , (MEM_START(DDR) + 0x0010000000) , (MEM_START(DDR) + 0x0013FFFFFF)  )
        MEM_RANGE( DDR_MASTER_MEM_MU0 , (MEM_START(DDR) + 0x0010000000) , (MEM_START(DDR) + 0x00103FFFFF)  )
        MEM_RANGE( DDR_MASTER_MEM_MU1 , (MEM_START(DDR) + 0x0010400000) , (MEM_START(DDR) + 0x00107FFFFF)  )
        //MEM_RANGE( DDR_(128MB)_MU2…15_** , (MEM_START(DDR) + 0x0010800000) , (MEM_START(DDR) + 0x0013FFFFFF)  )
    MEM_RANGE( DDR_ADMIN_MEM , (MEM_START(DDR) + 0x0014000000) , (MEM_START(DDR) + 0x0015FFFFFF)  )
        MEM_RANGE( DDR_ADMIN_MEM_MU0 , (MEM_START(DDR) + 0x0014000000) , (MEM_START(DDR) + 0x00143FFFFF)  )
        MEM_RANGE( DDR_ADMIN_MEM_MU1 , (MEM_START(DDR) + 0x0014400000) , (MEM_START(DDR) + 0x00147FFFFF)  )
        //MEM_RANGE( DDR_(28MB)_MU2..7_ , (MEM_START(DDR) + 0x0014800000) , (MEM_START(DDR) + 0x0015FFFFFF)  )
    MEM_RANGE( DDR_ELF_ADMIN , (MEM_START(DDR) + 0x0016000000) , (MEM_START(DDR) + 0x00167FFFFF)  )
        MEM_RANGE( DDR_ELF_ADMIN0 , (MEM_START(DDR) + 0x0016000000) , (MEM_START(DDR) + 0x00160FFFFF)  )
        //MEM_RANGE( DDR__ADMIN1..7_ , (MEM_START(DDR) + 0x0016100000) , (MEM_START(DDR) + 0x00167FFFFF)  )
    //MEM_RANGE( DDR_RSVD__ , (MEM_START(DDR) + 0x0016800000) , (MEM_START(DDR) + 0x003FFFFFFF)  )
    MEM_RANGE( DDR_SLAVE_MEM , (MEM_START(DDR) + 0x0040000000) , (MEM_START(DDR) + 0x00FFFFFFFF) )
        MEM_RANGE( DDR_SLAVE_MEM_CLST0 , (MEM_START(DDR) + 0x0040000000) , (MEM_START(DDR) + 0x004FFFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU0 , (MEM_START(DDR) + 0x0040000000) , (MEM_START(DDR) + 0x0040FFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU1 , (MEM_START(DDR) + 0x0041000000) , (MEM_START(DDR) + 0x0041FFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU2 , (MEM_START(DDR) + 0x0042000000) , (MEM_START(DDR) + 0x0042FFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU3 , (MEM_START(DDR) + 0x0043000000) , (MEM_START(DDR) + 0x0043FFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU4 , (MEM_START(DDR) + 0x0044000000) , (MEM_START(DDR) + 0x0044FFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU5 , (MEM_START(DDR) + 0x0045000000) , (MEM_START(DDR) + 0x0045FFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU6 , (MEM_START(DDR) + 0x0046000000) , (MEM_START(DDR) + 0x0046FFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU7 , (MEM_START(DDR) + 0x0047000000) , (MEM_START(DDR) + 0x0047FFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU8 , (MEM_START(DDR) + 0x0048000000) , (MEM_START(DDR) + 0x0048FFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU9 , (MEM_START(DDR) + 0x0049000000) , (MEM_START(DDR) + 0x0049FFFFFF)  )
            // MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU10 , (MEM_START(DDR) + 0x004A000000) , (MEM_START(DDR) + 0x004AFFFFFF)  )
            // MEM_RANGE( DDR_SLAVE_MEM_CLST0_MU11 , (MEM_START(DDR) + 0x004B000000) , (MEM_START(DDR) + 0x004BFFFFFF)  )
            MEM_RANGE( DDR_SLAVE_MEM_CLST0_SHARED , (MEM_START(DDR) + 0x004A000000) , (MEM_START(DDR) + 0x004FFFFFFF)  )
        MEM_RANGE( DDR_SLAVE_MEM_CLST1 , (MEM_START(DDR) + 0x004A000000) , (MEM_START(DDR) + 0x005FFFFFFF)  )
        //MEM_RANGE( DDR_SLAVE_MEM_CLST2…15_** , (MEM_START(DDR) + 0x0060000000) , (MEM_START(DDR) + 0x013FFFFFFF)  )
    //MEM_RANGE( DDR_RSVD__ , (MEM_START(DDR) + 0x0140000000) , (MEM_START(DDR) + 0x013FFFFFFF)  )

MEM_RANGE( DDR_HOST , (MEM_START(DDR) + 0x0140000000) , (MEM_START(DDR) + 0x07FFEFFFFF) )
    MEM_RANGE( DDR_TASK_CMD , (MEM_START(DDR) + 0x0140000000) , (MEM_START(DDR) + 0x01400FFFFF)  )
    MEM_RANGE( DDR_TASK_DEBUG_INFO , (MEM_START(DDR) + 0x0140100000) , (MEM_START(DDR) + 0x01401FFFFF)  )
    MEM_RANGE( DDR_TASK_INPUT , (MEM_START(DDR) + 0x0140200000) , (MEM_START(DDR) + 0x01C01FFFFF)  )
    MEM_RANGE( DDR_TASK_OUTPUT , (MEM_START(DDR) + 0x01C0200000) , (MEM_START(DDR) + 0x03401FFFFF)  )
    MEM_RANGE( DDR_HOST_HEAP , (MEM_START(DDR) + 0x0340200000) , (MEM_START(DDR) + 0x07FDEFFFFF)  )
    MEM_RANGE( DDR_ELF_CLST0 , (MEM_START(DDR) + 0x07FDF00000) , (MEM_START(DDR) + 0x07FDFFFFFF)  )
    //MEM_RANGE( DDR_ELF_CLST1...15_ , (MEM_START(DDR) + 0x07FE000000) , (MEM_START(DDR) + 0x07FEEFFFFF)  )
    MEM_RANGE( DDR_ELF_MASTER0 , (MEM_START(DDR) + 0x07FEF00000) , (MEM_START(DDR) + 0x07FEFFFFFF)  )
    //MEM_RANGE( DDR__MASTER1..15_ , (MEM_START(DDR) + 0x07FF000000) , (MEM_START(DDR) + 0x07FFEFFFFF)  )
// MEM_RANGE( DDR_Unavailable (at least 1MB)__ , (MEM_START(DDR) + 0x07FFF00000) , (MEM_START(DDR) + 0x07FFFFFFFF)  )	


/////////////////////////////////
// Virtual Address - Mu Only
/////////////////////////////////
MEM_RANGE( MU_CODE_V_ADDR , 0x00000000, 0x00010000 )
MEM_RANGE( MU_DRAM_V_ADDR , 0x10000000, 0x103FFFFF )
    MEM_RANGE( MU_DRAM_RO_RW_V_ADDR , 0x10000000, 0x10003FFF )
    MEM_RANGE( MU_DRAM_PRINT_BUF_V_ADDR , 0x10004000, 0x100040FF )
MEM_RANGE( MU_DTCM_V_ADDR , 0x30000000, 0x30004000 )
MEM_RANGE( MU_GLOBAL_V_ADDR , 0x80000000, 0x100000000000 )

// TEMP - L1 Cache Cmd Address
static const uint64_t L1_SPEC_ADDR  = MEM_END(DDR) - 0x40ull + 1ull;
static const uint64_t L1_FLUSH_ADDR = MEM_END(DDR) - 0x80ull + 1ull;
static const uint64_t L1_INVD_ADDR  = MEM_END(DDR) - 0xC0ull + 1ull;
static const uint64_t L1_DMB_ADDR  = MEM_END(DDR) - 0x100ull + 1ull;

#undef MEM_RANGE